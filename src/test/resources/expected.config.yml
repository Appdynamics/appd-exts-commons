servers:
  - uri: ""
    username: ""
    password: ""
    encryptedPassword: ""

    # Uri is preferred instead of host-port-useSsl combo.
  - host: "" # Avoid this, use uri instead
    port: "" # Avoid this, use uri instead
    useSsl: false # Avoid this, use uri instead.
    username: ""
    password: ""
    encryptedPassword: ""

connection:
  socketTimeout: 3000 # Read Timeout
  connectTimeout: 1000
  sslProtocols: ["TLSV1.2"] # Defaults to "default"
  sslCertCheckEnabled: true
  sslVerifyHostname: true

  # This need not be exposed to user. Should be used on a need basis
  sslCipherSuites: [] # Defaults to "default"

  sslTrustStorePath: "" # If not set, defaulted to machine-agent/conf/extensions-cacerts.jks. The prop "-Dappdynamics.extensions.truststore.path=/path/cacerts" takes precedence if set
  sslTrustStorePassword: ""
  sslTrustStoreEncryptedPassword: ""

  sslKeyStorePath: "" # If not set, defaulted to machine-agent/conf/extensions-clientcerts.jks. The prop "-Dappdynamics.extensions.keystore.path=/path/clientcerts" takes precedence if set
  sslKeyStorePassword: ""
  sslKeyStoreEncryptedPassword: ""

  enableCookies: false #Defaults to false
  enablePreemptiveAuth: true

proxy:
  uri: ""
  username: ""
  password: ""
  encryptedPassword: ""

# Common for all the encrypted passwords in this file.
encryptionKey: ""

# A thread pool will be automatically created. If this property is omitted,
# the thread pool will not be created. (for synchronous execution)
numberOfThreads: 1


# Generate a custom dashboard based on the provided template
customDashboard:
    enabled: true
    dashboardName: "Sample Monitor Dashboard"
    sslCertCheckEnabled: true
    # Update the path to the dashboard file.
    pathToSIMDashboard: "monitors/SampleMonitor/SIMDashboard.json"
    pathToNormalDashboard: "monitors/SampleMonitor/normalDashboard.json"
    periodicDashboardCheckInSeconds: 300

# To upload the dashboard, please create a user from Controller UI or
# add the credentials of an existing user.
controllerInfo:
    controllerHost: "host"
    controllerPort: 9090
    controllerSslEnabled: false
    enableOrchestration: false
    uniqueHostId: ""
    username: "username"
    password: "password"
    encryptedPassword: ""
    encryptionKey: ""
    accountAccessKey: ""
    account: "account"
    machinePath: ""
    simEnabled: false
    applicationName: "application"
    tierName: "tier"
    nodeName: "node"

# This is to run this in scheduled mode. In this case, the extension will fetch the data every 300 seconds
# and caches the data. The cached data will be reported to controller every min. This way there is no metric drop.
# Can be used when the data rarely changes or to reduce the load while fetching metrics every minute.
taskSchedule:
  numberOfThreads: 1
  taskDelaySeconds: 300

# This field contains the various parameters required to initiate a connection and send data to the AppDynamics Events Service.
eventsServiceParameters:
  host:
  port:
  globalAccountName:
  eventsApiKey:
  useSsl: false

metricPathReplacements:
  - replace: "&"
    replaceWith: ""
  - replace: "percent"
    replaceWith: "%"